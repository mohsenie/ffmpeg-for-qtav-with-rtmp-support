From 91132cca8bf2db997869126624737e2742128550 Mon Sep 17 00:00:00 2001
From: wang-bin <wbsecg1@gmail.com>
Date: Tue, 8 Dec 2015 11:15:59 +0800
Subject: [PATCH 2/2] winrt: fix asm build. neon is broken

---
 libavcodec/arm/Makefile                |   6 +-
 libavcodec/arm/fft_init_arm.c          |   2 +
 libavcodec/arm/fft_vfp.S               | 260 ++-------------------------------
 libavcodec/arm/jrevdct_arm.S           |  33 +++--
 libavcodec/arm/rv40dsp_init_arm.c      |   3 +-
 libavcodec/arm/vp8.h                   |   4 +-
 libavcodec/arm/vp8dsp_init_arm.c       |   4 +
 libswresample/arm/audio_convert_init.c |   7 +-
 libswscale/arm/swscale_unscaled.c      |   2 +
 9 files changed, 52 insertions(+), 269 deletions(-)

diff --git a/libavcodec/arm/Makefile b/libavcodec/arm/Makefile
index 179c403..43602d7 100644
--- a/libavcodec/arm/Makefile
+++ b/libavcodec/arm/Makefile
@@ -70,9 +70,9 @@ ARMV6-OBJS-$(CONFIG_ME_CMP)            += arm/me_cmp_armv6.o
 ARMV6-OBJS-$(CONFIG_MPEGAUDIODSP)      += arm/mpegaudiodsp_fixed_armv6.o
 ARMV6-OBJS-$(CONFIG_MPEGVIDEOENC)      += arm/mpegvideoencdsp_armv6.o
 ARMV6-OBJS-$(CONFIG_PIXBLOCKDSP)       += arm/pixblockdsp_armv6.o
-ARMV6-OBJS-$(CONFIG_VP8DSP)            += arm/vp8_armv6.o               \
-                                          arm/vp8dsp_init_armv6.o       \
-                                          arm/vp8dsp_armv6.o
+#ARMV6-OBJS-$(CONFIG_VP8DSP)            += arm/vp8_armv6.o               \
+#                                          arm/vp8dsp_init_armv6.o       \
+#                                          arm/vp8dsp_armv6.o
 
 # decoders/encoders
 ARMV6-OBJS-$(CONFIG_MLP_DECODER)       += arm/mlpdsp_armv6.o
diff --git a/libavcodec/arm/fft_init_arm.c b/libavcodec/arm/fft_init_arm.c
index 055c2c1..a29ddd4 100644
--- a/libavcodec/arm/fft_init_arm.c
+++ b/libavcodec/arm/fft_init_arm.c
@@ -41,7 +41,9 @@ av_cold void ff_fft_init_arm(FFTContext *s)
     int cpu_flags = av_get_cpu_flags();
 
     if (have_vfp_vm(cpu_flags)) {
+#if !HAVE_WINRT
         s->fft_calc     = ff_fft_calc_vfp;
+#endif
 #if CONFIG_MDCT
         s->imdct_half   = ff_imdct_half_vfp;
 #endif
diff --git a/libavcodec/arm/fft_vfp.S b/libavcodec/arm/fft_vfp.S
index ac60132..f1ab37c 100644
--- a/libavcodec/arm/fft_vfp.S
+++ b/libavcodec/arm/fft_vfp.S
@@ -21,35 +21,8 @@
 
 #include "libavutil/arm/asm.S"
 
-@ The fftx_internal_vfp versions of the functions obey a modified AAPCS:
-@ VFP is in RunFast mode, vector length 4, stride 1 thoroughout, and
-@ all single-precision VFP registers may be corrupted on exit. The a2
-@ register may not be clobbered in these functions, as it holds the
-@ stored original FPSCR.
-
-function ff_fft_calc_vfp, export=1
-        ldr     ip, [a1, #0]    @ nbits
-        mov     a1, a2
-        movrel  a2, (fft_tab_vfp - 8)
-        ldr     pc, [a2, ip, lsl #2]
-endfunc
-const   fft_tab_vfp, relocate=1
-        .word   fft4_vfp
-        .word   fft8_vfp
-        .word   X(ff_fft16_vfp)     @ this one alone is exported
-        .word   fft32_vfp
-        .word   fft64_vfp
-        .word   fft128_vfp
-        .word   fft256_vfp
-        .word   fft512_vfp
-        .word   fft1024_vfp
-        .word   fft2048_vfp
-        .word   fft4096_vfp
-        .word   fft8192_vfp
-        .word   fft16384_vfp
-        .word   fft32768_vfp
-        .word   fft65536_vfp
-endconst
+@ TODO: * FFTs wider than 16
+@       * dispatch code
 
 function fft4_vfp
         vldr    d0, [a1, #0*2*4]   @ s0,s1   = z[0]
@@ -158,22 +131,18 @@ endfunc
              vstr    d9, [a1, #3 * 2*4]
 .endm
 
-function .Lfft8_internal_vfp
-        macro_fft8_head
-        macro_fft8_tail
-        bx      lr
-endfunc
-
 function fft8_vfp
         ldr     a3, =0x03030000     @ RunFast mode, vector length 4, stride 1
         fmrx    a2, FPSCR
         fmxr    FPSCR, a3
         vpush   {s16-s31}
-        mov     ip, lr
-        bl      .Lfft8_internal_vfp
+
+        macro_fft8_head
+        macro_fft8_tail
+
         vpop    {s16-s31}
         fmxr    FPSCR, a2
-        bx      ip
+        bx      lr
 endfunc
 
 .align 3
@@ -184,7 +153,12 @@ cos1pi8:    @ cos(1*pi/8) = sqrt(2+sqrt(2))/2
 cos3pi8:    @ cos(2*pi/8) = sqrt(2-sqrt(2))/2
         .float  0.3826834261417388916015625
 
-function .Lfft16_internal_vfp
+function ff_fft16_vfp, export=1
+        ldr     a3, =0x03030000     @ RunFast mode, vector length 4, stride 1
+        fmrx    a2, FPSCR
+        fmxr    FPSCR, a3
+        vpush   {s16-s31}
+
         macro_fft8_head
         @ FFT4(z+8)
         vldr    d10, [a1, #8 * 2*4]
@@ -318,213 +292,7 @@ function .Lfft16_internal_vfp
               vstr    d8, [a1, #0 * 2*4]
               vstr    d9, [a1, #4 * 2*4]
 
-        bx      lr
-endfunc
-
-function ff_fft16_vfp, export=1
-        ldr     a3, =0x03030000     @ RunFast mode, vector length 4, stride 1
-        fmrx    a2, FPSCR
-        fmxr    FPSCR, a3
-        vpush   {s16-s31}
-        mov     ip, lr
-        bl      .Lfft16_internal_vfp
-        vpop    {s16-s31}
-        fmxr    FPSCR, a2
-        bx      ip
-endfunc
-
-.macro pass n, z0, z1, z2, z3
-        add     v6, v5, #4*2*\n
-        @ TRANSFORM_ZERO(z[0],z[o1],z[o2],z[o3])
-            @ TRANSFORM(z[1],z[o1+1],z[o2+1],z[o3+1],wre[1],wim[-1])
-                @ TRANSFORM(z[0],z[o1],z[o2],z[o3],wre[0],wim[0])
-                    @ TRANSFORM(z[1],z[o1+1],z[o2+1],z[o3+1],wre[1],wim[-1])
-            vldr    d8, [\z2, #8*(o2+1)]        @ s16,s17
-            vldmdb  v6!, {s2}
-            vldr    d9, [\z3, #8*(o3+1)]        @ s18,s19
-            vldmia  v5!, {s0,s1}                @ s0 is unused
-        vldr    s7, [\z2, #8*o2]            @ t1
-            vmul.f  s20, s16, s2                @ vector * scalar
-        vldr    s0, [\z3, #8*o3]            @ t5
-        vldr    s6, [\z2, #8*o2+4]          @ t2
-        vldr    s3, [\z3, #8*o3+4]          @ t6
-            vmul.f  s16, s16, s1                @ vector * scalar
-        ldr     a4, =\n-1
-1:      add     \z0, \z0, #8*2
- .if \n*4*2 >= 512
-        add     \z1, \z1, #8*2
- .endif
- .if \n*4*2 >= 256
-        add     \z2, \z2, #8*2
- .endif
- .if \n*4*2 >= 512
-        add     \z3, \z3, #8*2
- .endif
-        @ up to 2 stalls (VFP vector issuing / waiting for s0)
-        @ depending upon whether this is the first iteration and
-        @ how many add instructions are inserted above
-        vadd.f  s4, s0, s7                  @ t5
-        vadd.f  s5, s6, s3                  @ t6
-        vsub.f  s6, s6, s3                  @ t4
-        vsub.f  s7, s0, s7                  @ t3
-        vldr    d6, [\z0, #8*0-8*2]         @ s12,s13
-            vadd.f  s0, s16, s21                @ t1
-        vldr    d7, [\z1, #8*o1-8*2]        @ s14,s15
-            vsub.f  s1, s18, s23                @ t5
-        vadd.f  s8, s4, s12                 @ vector + vector
-        @ stall (VFP vector issuing)
-        @ stall (VFP vector issuing)
-        @ stall (VFP vector issuing)
-        vsub.f  s4, s12, s4
-        vsub.f  s5, s13, s5
-        vsub.f  s6, s14, s6
-        vsub.f  s7, s15, s7
-            vsub.f  s2, s17, s20                @ t2
-            vadd.f  s3, s19, s22                @ t6
-        vstr    d4, [\z0, #8*0-8*2]         @ s8,s9
-        vstr    d5, [\z1, #8*o1-8*2]        @ s10,s11
-        @ stall (waiting for s5)
-        vstr    d2, [\z2, #8*o2-8*2]        @ s4,s5
-            vadd.f  s4, s1, s0                  @ t5
-        vstr    d3, [\z3, #8*o3-8*2]        @ s6,s7
-            vsub.f  s7, s1, s0                  @ t3
-            vadd.f  s5, s2, s3                  @ t6
-            vsub.f  s6, s2, s3                  @ t4
-            vldr    d6, [\z0, #8*1-8*2]         @ s12,s13
-            vldr    d7, [\z1, #8*(o1+1)-8*2]    @ s14,s15
-                vldr    d4, [\z2, #8*o2]            @ s8,s9
-                vldmdb  v6!, {s2,s3}
-                vldr    d5, [\z3, #8*o3]            @ s10,s11
-            vadd.f  s20, s4, s12                @ vector + vector
-                vldmia  v5!, {s0,s1}
-                    vldr    d8, [\z2, #8*(o2+1)]        @ s16,s17
-            @ stall (VFP vector issuing)
-            vsub.f  s4, s12, s4
-            vsub.f  s5, s13, s5
-            vsub.f  s6, s14, s6
-            vsub.f  s7, s15, s7
-                vmul.f  s12, s8, s3                 @ vector * scalar
-            vstr    d10, [\z0, #8*1-8*2]        @ s20,s21
-                    vldr    d9, [\z3, #8*(o3+1)]        @ s18,s19
-            vstr    d11, [\z1, #8*(o1+1)-8*2]   @ s22,s23
-                vmul.f  s8, s8, s0                  @ vector * scalar
-            vstr    d2, [\z2, #8*(o2+1)-8*2]    @ s4,s5
-            @ stall (waiting for s7)
-            vstr    d3, [\z3, #8*(o3+1)-8*2]    @ s6,s7
-                    vmul.f  s20, s16, s2                @ vector * scalar
-                @ stall (VFP vector issuing)
-                @ stall (VFP vector issuing)
-                @ stall (VFP vector issuing)
-                vadd.f  s7, s8, s13                 @ t1
-                vsub.f  s6, s9, s12                 @ t2
-                vsub.f  s0, s10, s15                @ t5
-                vadd.f  s3, s11, s14                @ t6
-                    vmul.f  s16, s16, s1                @ vector * scalar
-        subs    a4, a4, #1
-        bne     1b
-        @ What remains is identical to the first two indentations of
-        @ the above, but without the increment of z
-        vadd.f  s4, s0, s7                  @ t5
-        vadd.f  s5, s6, s3                  @ t6
-        vsub.f  s6, s6, s3                  @ t4
-        vsub.f  s7, s0, s7                  @ t3
-        vldr    d6, [\z0, #8*0]             @ s12,s13
-            vadd.f  s0, s16, s21                @ t1
-        vldr    d7, [\z1, #8*o1]            @ s14,s15
-            vsub.f  s1, s18, s23                @ t5
-        vadd.f  s8, s4, s12                 @ vector + vector
-        vsub.f  s4, s12, s4
-        vsub.f  s5, s13, s5
-        vsub.f  s6, s14, s6
-        vsub.f  s7, s15, s7
-            vsub.f  s2, s17, s20                @ t2
-            vadd.f  s3, s19, s22                @ t6
-        vstr    d4, [\z0, #8*0]             @ s8,s9
-        vstr    d5, [\z1, #8*o1]            @ s10,s11
-        vstr    d2, [\z2, #8*o2]            @ s4,s5
-            vadd.f  s4, s1, s0                  @ t5
-        vstr    d3, [\z3, #8*o3]            @ s6,s7
-            vsub.f  s7, s1, s0                  @ t3
-            vadd.f  s5, s2, s3                  @ t6
-            vsub.f  s6, s2, s3                  @ t4
-            vldr    d6, [\z0, #8*1]             @ s12,s13
-            vldr    d7, [\z1, #8*(o1+1)]        @ s14,s15
-            vadd.f  s20, s4, s12                @ vector + vector
-            vsub.f  s4, s12, s4
-            vsub.f  s5, s13, s5
-            vsub.f  s6, s14, s6
-            vsub.f  s7, s15, s7
-            vstr    d10, [\z0, #8*1]            @ s20,s21
-            vstr    d11, [\z1, #8*(o1+1)]       @ s22,s23
-            vstr    d2, [\z2, #8*(o2+1)]        @ s4,s5
-            vstr    d3, [\z3, #8*(o3+1)]        @ s6,s7
-.endm
-
-.macro  def_fft n, n2, n4
-function .Lfft\n\()_internal_vfp
- .if \n >= 512
-        push    {v1-v6,lr}
- .elseif \n >= 256
-        push    {v1-v2,v5-v6,lr}
- .else
-        push    {v1,v5-v6,lr}
- .endif
-        mov     v1, a1
-        bl      .Lfft\n2\()_internal_vfp
-        add     a1, v1, #8*(\n/4)*2
-        bl      .Lfft\n4\()_internal_vfp
-        movrelx v5, X(ff_cos_\n), a1
-        add     a1, v1, #8*(\n/4)*3
-        bl      .Lfft\n4\()_internal_vfp
- .if \n >= 512
-  .set o1, 0*(\n/4/2)
-  .set o2, 0*(\n/4/2)
-  .set o3, 0*(\n/4/2)
-        add     v2, v1, #8*2*(\n/4/2)
-        add     v3, v1, #8*4*(\n/4/2)
-        add     v4, v1, #8*6*(\n/4/2)
-        pass    (\n/4/2), v1, v2, v3, v4
-        pop     {v1-v6,pc}
- .elseif \n >= 256
-  .set o1, 2*(\n/4/2)
-  .set o2, 0*(\n/4/2)
-  .set o3, 2*(\n/4/2)
-        add     v2, v1, #8*4*(\n/4/2)
-        pass    (\n/4/2), v1, v1, v2, v2
-        pop     {v1-v2,v5-v6,pc}
- .else
-  .set o1, 2*(\n/4/2)
-  .set o2, 4*(\n/4/2)
-  .set o3, 6*(\n/4/2)
-        pass    (\n/4/2), v1, v1, v1, v1
-        pop     {v1,v5-v6,pc}
- .endif
-endfunc
-
-function fft\n\()_vfp
-        ldr     a3, =0x03030000 /* RunFast mode, vector length 4, stride 1 */
-        fmrx    a2, FPSCR
-        fmxr    FPSCR, a3
-        vpush   {s16-s31}
-        mov     ip, lr
-        bl      .Lfft\n\()_internal_vfp
         vpop    {s16-s31}
         fmxr    FPSCR, a2
-        bx      ip
+        bx      lr
 endfunc
-
-.ltorg
-.endm
-
-        def_fft    32,    16,     8
-        def_fft    64,    32,    16
-        def_fft   128,    64,    32
-        def_fft   256,   128,    64
-        def_fft   512,   256,   128
-        def_fft  1024,   512,   256
-        def_fft  2048,  1024,   512
-        def_fft  4096,  2048,  1024
-        def_fft  8192,  4096,  2048
-        def_fft 16384,  8192,  4096
-        def_fft 32768, 16384,  8192
-        def_fft 65536, 32768, 16384
diff --git a/libavcodec/arm/jrevdct_arm.S b/libavcodec/arm/jrevdct_arm.S
index f951e2a..b208043 100644
--- a/libavcodec/arm/jrevdct_arm.S
+++ b/libavcodec/arm/jrevdct_arm.S
@@ -54,19 +54,24 @@
 #define FIX_M_1_961570560_ID   40
 #define FIX_M_2_562915447_ID   44
 #define FIX_0xFFFF_ID          48
+        .text
+        .align 2
 
 function ff_j_rev_dct_arm, export=1
-        push {r0, r4 - r11, lr}
+        stmdb   sp!, { r4 - r12, lr }   @ all callee saved regs
+
+        sub sp, sp, #4                  @ reserve some space on the stack
+        str r0, [ sp ]                  @ save the DCT pointer to the stack
 
         mov lr, r0                      @ lr = pointer to the current row
         mov r12, #8                     @ r12 = row-counter
-        movrel r11, const_array         @ r11 = base pointer to the constants array
+        adr r11, const_array            @ r11 = base pointer to the constants array
 row_loop:
         ldrsh r0, [lr, # 0]             @ r0 = 'd0'
         ldrsh r2, [lr, # 2]             @ r2 = 'd2'
 
         @ Optimization for row that have all items except the first set to 0
-        @ (this works as the int16_t are always 4-byte aligned)
+        @ (this works as the DCTELEMS are always 4-byte aligned)
         ldr r5, [lr, # 0]
         ldr r6, [lr, # 4]
         ldr r3, [lr, # 8]
@@ -97,7 +102,7 @@ row_loop:
         add r4, r6, r3, lsl #13             @ r4 = tmp11
         rsb r3, r6, r3, lsl #13             @ r3 = tmp12
 
-        push {r0, r2, r3, r4} @ save on the stack tmp10, tmp13, tmp12, tmp11
+        stmdb   sp!, { r0, r2, r3, r4 } @ save on the stack tmp10, tmp13, tmp12, tmp11
 
         ldrsh r3, [lr, #10]             @ r3 = 'd3'
         ldrsh r5, [lr, #12]             @ r5 = 'd5'
@@ -131,8 +136,8 @@ row_loop:
         add r3, r3, r4                  @ r3 = tmp2
         add r1, r1, r6                  @ r1 = tmp3
 
-        pop {r0, r2, r4, r6} @ r0 = tmp10 / r2 = tmp13 / r4 = tmp12 / r6 = tmp11
-                             @ r1 = tmp3  / r3 = tmp2  / r5 = tmp1  / r7 = tmp0
+        ldmia sp!, { r0, r2, r4, r6 } @ r0 = tmp10 / r2 = tmp13 / r4 = tmp12 / r6 = tmp11
+                                      @ r1 = tmp3  / r3 = tmp2  / r5 = tmp1  / r7 = tmp0
 
         @ Compute DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS)
         add r8, r0, r1
@@ -206,7 +211,7 @@ end_of_row_loop:
 
 start_column_loop:
         @ Start of column loop
-        pop {lr}
+        ldr lr, [ sp ]
         mov r12, #8
 column_loop:
         ldrsh r0, [lr, #( 0*8)]             @ r0 = 'd0'
@@ -240,7 +245,7 @@ column_loop:
         orrs r10, r9, r10
         beq empty_odd_column
 
-        push {r0, r2, r4, r6} @ save on the stack tmp10, tmp13, tmp12, tmp11
+        stmdb   sp!, { r0, r2, r4, r6 } @ save on the stack tmp10, tmp13, tmp12, tmp11
 
         add r0, r3, r5                  @ r0 = 'z2'
         add r2, r1, r7                  @ r2 = 'z1'
@@ -270,8 +275,8 @@ column_loop:
         add r3, r3, r4                  @ r3 = tmp2
         add r1, r1, r6                  @ r1 = tmp3
 
-        pop {r0, r2, r4, r6} @ r0 = tmp10 / r2 = tmp13 / r4 = tmp11 / r6 = tmp12
-                             @ r1 = tmp3  / r3 = tmp2  / r5 = tmp1  / r7 = tmp0
+        ldmia sp!, { r0, r2, r4, r6 } @ r0 = tmp10 / r2 = tmp13 / r4 = tmp11 / r6 = tmp12
+                                      @ r1 = tmp3  / r3 = tmp2  / r5 = tmp1  / r7 = tmp0
 
         @ Compute DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3)
         add r8, r0, r1
@@ -363,10 +368,11 @@ empty_odd_column:
 
 the_end:
         @ The end....
-        pop {r4 - r11, pc}
+        add sp, sp, #4
+        ldmia   sp!, { r4 - r12, pc }   @ restore callee saved regs and return
 endfunc
-
-const const_array
+const_array:
+        .align 2
         .word FIX_0_298631336
         .word FIX_0_541196100
         .word FIX_0_765366865
@@ -380,4 +386,3 @@ const const_array
         .word FIX_M_1_961570560
         .word FIX_M_2_562915447
         .word FIX_0xFFFF
-endconst
diff --git a/libavcodec/arm/rv40dsp_init_arm.c b/libavcodec/arm/rv40dsp_init_arm.c
index c24854d..3f86ada 100644
--- a/libavcodec/arm/rv40dsp_init_arm.c
+++ b/libavcodec/arm/rv40dsp_init_arm.c
@@ -144,7 +144,8 @@ static av_cold void rv40dsp_init_neon(RV34DSPContext *c)
 av_cold void ff_rv40dsp_init_arm(RV34DSPContext *c)
 {
     int cpu_flags = av_get_cpu_flags();
-
+#if HAVE_NEON
     if (have_neon(cpu_flags))
         rv40dsp_init_neon(c);
+#endif
 }
diff --git a/libavcodec/arm/vp8.h b/libavcodec/arm/vp8.h
index 965342d..5fa26c6 100644
--- a/libavcodec/arm/vp8.h
+++ b/libavcodec/arm/vp8.h
@@ -24,12 +24,12 @@
 #include "config.h"
 #include "libavcodec/vp56.h"
 #include "libavcodec/vp8.h"
-
+#if !HAVE_WINRT
 #if HAVE_ARMV6_EXTERNAL
 #define vp8_decode_block_coeffs_internal ff_decode_block_coeffs_armv6
 int ff_decode_block_coeffs_armv6(VP56RangeCoder *rc, int16_t block[16],
                                  uint8_t probs[8][3][NUM_DCT_TOKENS-1],
                                  int i, uint8_t *token_prob, int16_t qmul[2]);
 #endif
-
+#endif
 #endif /* AVCODEC_ARM_VP8_H */
diff --git a/libavcodec/arm/vp8dsp_init_arm.c b/libavcodec/arm/vp8dsp_init_arm.c
index 8b80176..12f9555 100644
--- a/libavcodec/arm/vp8dsp_init_arm.c
+++ b/libavcodec/arm/vp8dsp_init_arm.c
@@ -25,20 +25,24 @@
 
 av_cold void ff_vp78dsp_init_arm(VP8DSPContext *dsp)
 {
+#if 0
     int cpu_flags = av_get_cpu_flags();
 
     if (have_armv6(cpu_flags))
         ff_vp78dsp_init_armv6(dsp);
     if (have_neon(cpu_flags))
         ff_vp78dsp_init_neon(dsp);
+#endif
 }
 
 av_cold void ff_vp8dsp_init_arm(VP8DSPContext *dsp)
 {
+#if 0
     int cpu_flags = av_get_cpu_flags();
 
     if (have_armv6(cpu_flags))
         ff_vp8dsp_init_armv6(dsp);
     if (have_neon(cpu_flags))
         ff_vp8dsp_init_neon(dsp);
+#endif
 }
diff --git a/libswresample/arm/audio_convert_init.c b/libswresample/arm/audio_convert_init.c
index ec9e62e..525cd08 100644
--- a/libswresample/arm/audio_convert_init.c
+++ b/libswresample/arm/audio_convert_init.c
@@ -29,7 +29,7 @@
 void swri_oldapi_conv_flt_to_s16_neon(int16_t *dst, const float *src, int len);
 void swri_oldapi_conv_fltp_to_s16_2ch_neon(int16_t *dst, float *const *src, int len, int channels);
 void swri_oldapi_conv_fltp_to_s16_nch_neon(int16_t *dst, float *const *src, int len, int channels);
-
+#if HAVE_NEON
 static void conv_flt_to_s16_neon(uint8_t **dst, const uint8_t **src, int len){
     swri_oldapi_conv_flt_to_s16_neon((int16_t*)*dst, (const float*)*src, len);
 }
@@ -44,7 +44,7 @@ static void conv_fltp_to_s16_nch_neon(uint8_t **dst, const uint8_t **src, int le
         ;
     swri_oldapi_conv_fltp_to_s16_nch_neon((int16_t*)*dst, (float *const*)src, len, channels);
 }
-
+#endif
 av_cold void swri_audio_convert_init_arm(struct AudioConvert *ac,
                                        enum AVSampleFormat out_fmt,
                                        enum AVSampleFormat in_fmt,
@@ -53,7 +53,7 @@ av_cold void swri_audio_convert_init_arm(struct AudioConvert *ac,
     int cpu_flags = av_get_cpu_flags();
 
     ac->simd_f= NULL;
-
+#if HAVE_NEON
     if (have_neon(cpu_flags)) {
         if(out_fmt == AV_SAMPLE_FMT_S16 && in_fmt == AV_SAMPLE_FMT_FLT || out_fmt == AV_SAMPLE_FMT_S16P && in_fmt == AV_SAMPLE_FMT_FLTP)
             ac->simd_f = conv_flt_to_s16_neon;
@@ -64,4 +64,5 @@ av_cold void swri_audio_convert_init_arm(struct AudioConvert *ac,
         if(ac->simd_f)
             ac->in_simd_align_mask = ac->out_simd_align_mask = 15;
     }
+#endif
 }
diff --git a/libswscale/arm/swscale_unscaled.c b/libswscale/arm/swscale_unscaled.c
index 8aa933c..41520b4 100644
--- a/libswscale/arm/swscale_unscaled.c
+++ b/libswscale/arm/swscale_unscaled.c
@@ -181,6 +181,8 @@ static void get_unscaled_swscale_neon(SwsContext *c) {
 void ff_get_unscaled_swscale_arm(SwsContext *c)
 {
     int cpu_flags = av_get_cpu_flags();
+#if HAVE_NEON
     if (have_neon(cpu_flags))
         get_unscaled_swscale_neon(c);
+#endif
 }
-- 
2.6.3.windows.1

